% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utility-functions.R
\name{set_annotation_IS_vars}
\alias{set_annotation_IS_vars}
\title{Define custom gene annotation vars.}
\usage{
set_annotation_IS_vars(specs)
}
\arguments{
\item{specs}{Either a named vector or a data frame with specific format.
See details.}
}
\value{
Nothing
}
\description{
This function lets the user specify the name and types of the gene
annotation fields.
Default values are \verb{GeneName (char), GeneStrand (char)}.
}
\details{
The user can supply specifications in the form of a named vector or a
data frame.
\subsection{Named vector}{

When using a named vector, names should be the names of the columns,
values should be the type associated with each column in the form
of a string. The vector gets automatically converted into a data frame
with the right format (default values for the columns \code{transform} and
\code{flag} are \code{NULL} and \code{required} respectively).
}

\subsection{Data frame}{

When supplying a data frame, users must follow the format below:\preformatted{## # A tibble: 1 × 4
##   names      types      transform flag               
##   <chr>      <chr>      <list>    <chr>              
## 1 <col_name> <col_type> <formula> <required/optional>
}

Where the column \code{names} contains the names of the column,
the \code{types} column contains the column classes,
the column \code{transform} can hold a function or
a purrr-style lambda
that will be applied to the corresponding column
after import the column \code{flag} can contain for each column either the
value \code{required} or \code{optional}, and it is used in certain functions
to determine the minimal set of columns required.
Note that a valid function for the \code{transform} column
takes as input a vector (the column)
and outputs a transformed vector that has the same length as the original
one. If no function should be applied, transform field should be set to
\code{NULL}. Example:\if{html}{\out{<div class="sourceCode r">}}\preformatted{tibble::tribble(
~ names, ~ types, ~ transform, ~ flag,
"col1", "char", ~ stringr::str_to_upper(.x), "required",
"col2", "int", NULL, "required"
)
}\if{html}{\out{</div>}}\preformatted{## # A tibble: 2 × 4
##   names types transform flag    
##   <chr> <chr> <list>    <chr>   
## 1 col1  char  <formula> required
## 2 col2  int   <NULL>    required
}
}

\subsection{Types specification}{
\itemize{
\item Integer: \code{int}
\item Character or string: \code{char}
\item Numeric (double): \code{numeric}
\item Logical (True/False): \code{logi}
\item Factor: \code{factor}
\item Date or date time: either generic \code{date} or any of the supported
date types in \code{date_formats()}.
See also the documentation of package \code{\link{lubridate}} for more info.
If \code{date} is supplied, the format of the date is either guessed or a
global specification supplied to the appropriate function is used for
parsing.
}
}
}
\examples{
set_annotation_IS_vars(c(GeneName = "char"))
print(annotation_IS_vars(TRUE))
reset_annotation_IS_vars()
}
\seealso{
\code{\link{date_formats}}, \code{\link{reset_annotation_IS_vars}},
\code{\link{annotation_IS_vars}}
}
